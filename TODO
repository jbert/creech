Now
---

- eating
    DONE - move to eating distance for food
    - if at eating distance "eat"
    - eat transfers food value from food to creech
        - creech loses food value over time

- add genotype and phenotype
    - genotype:
        map[string]float64
        get via method which checks string
        set only at ctor time with full set
    - phenotype calls into genotype to calc derived characteristics
        - do we also want environmental effects to affect phenotype?
            - (nutrition history?)
            - current heat levels (fur length)
                - the amount of phenotypic variability can be a genomic trait
    - try and make each genomic value have positives and negatives

-----------------------------------------------------------------

Soon
----

- what to do if two creeches approach same food?
    - eat?
    - flee?
    - can we add 'fight?'

- bugs?
    - more distant creech triggers flee when eating?
    - visual approach distance for large food has a bigger gap than small?
        - draw radius?

- have view work over torus boundaries
    - make up multiple regions?

- persistence
    - save/load game state
    - have save+exit http endpt / signal handler

- dev hot reload:
    - reconect websocket on disconnect (loop)
    - send version (or random nonce) as startup websocket message
    - refresh if doesn't match

    - add inotify
        - build
        - shutdown
        - start (with game state load) script in repo


- momentum and acceleration
    - turning too
    - how does that work?
        - turning shouldn't change my momentum vector
        - but also I can't turn and have my momentum just carry me sideways

- static cleanup
    - HTML structure
    - JS into sep file
    - ??? pass constants into a config block in JS?

-----------------------------------------------------------------

Maybe
-----

- optimisations
    - define colours once
    - draw creechs once and translate
        - server side?
    - client side render

- improve view region?
    - side

- entity needs an id?
    - so we can find + remove them?

- move to PNGs?
    - or Drawable could send JS to draw on the canvas?
    - urls to load PNGs for creeches - actually entities
        - /entity/id/image.png
        - /creech   {

- pull a real random seed?

- send game state, not draw commands
    - but this does require "how to draw state" logic client side
        - golang wasm?

- don't return actual creeches and food in "Observe" but instead "observations"
    - disguise!
    - bad eyesight!

- how to handle running away from something
    - do we remember it's there?
    - can we hear it?

-----------------------------------------------------------------

Done
----

Sun 28 Feb 07:32:14 GMT 2021
----------------------------
DONE - clean golangci-lint

DONE - make tick a cmdline option

DONE - move to floats
    - pos
    - randomEmpty becomes "size" based
    - add Entity which has a float-pos and a size
        - food and creeches embed entity

DONE - turn and move on smaller granularity

DONE - fix down-pointing arrow

DONE - rename Dir Polar?

NO - remove 'R' from 'Dir'

DONE - web renderer
    DONE - draw a line (centre -> direction)
    DONE - open a websocket
    DONE - remove pixelsPerWidth
        - go 1:1 for now
        - then set up JS canvas with a transform
            - so that (0,0) is centered
            - and x goes from (-width/2, width]
            - and y goes from (-height/2, height]
            - then Drawable can send JS commands
                - startFrame fillrect (in game coords)
                - "circle"
                - moveTo/lineTo
                - fiinshFrame 'stroke'
    DONE - just send a poly to draw:
        - pts + hex rgb to fill
    DONE - proxy startframe/finishframe/drawat over websocket as JSON
        - or as JS!?
    DONE - drawat should send {pos, style=circle|line, facing} for creech and food
    DONE - see if it works
    - move to PNGs?
        - or Drawable could send JS to draw on the canvas?
    - urls to load PNGs for creeches - actually entities
        - /entity/id/image.png
        - /creech   {

DONE - TODO
    - is there a Drawable abstraction which would work over SDL and JS?
        - instead of returning JS to draw a thing?
        - work in internal coords
        type DrawCommand

DONE - renorm creech posses into modulo-space each tick

----

DONE - can we write a websocket-based renderer?
    - with a JS client?
    NO - in this case it make sense to make the render loop only send "undraw X", "draw X"?
        - or maybe like WM_PAINT (blank this region, draw these items in that region)
        - maybe not if we aren't tiled?

DONE - pull an 'Entity' out of Creech+Food?
    - has a pos
    - in a single list (or a single ForEach allows traversal?)

DONE - change to float coords for world?
    - change to float pos
        - change 'Equal' to 'Near'
        - inbuilt epilson?
        - or pass in size of Entities to define 'Near'?
        - dir becomes "theta"
    - tile at draw time?
        - only 'screen' should care, other renderers may not be tile based
    - pigeonhole problem? How to avoid drawing things in same tile?
        - Answer: Ensure we can't have things too close to each other

DONE - add in food
    - value, pos

DONE - add in another creech

NO - split polar out from Pos
    NO - tests? :-)

Mon  1 Mar 07:24:32 GMT 2021
----------------------------

DONE - remove x,y from DrawAt
    - instead just pass the drawable
    - the drawables know where they are

DONE - unpick the websocket loop into a function
    - and use defer for close
    - no need! helper function!

DONE - DRY foodSize
    - make size dependent on value?

DONE - make food size related to value
    - only store one
    NO - lose 'size' in entity?
    NO - lose entity?

DONE - allow creeches to return multiple drawcommands
    - specify line+fill colour

DONE - draw view region
    DONE - have helpers/ctors for DrawCommand
        DONE - default colours?

DONE - fix error logging in websocket handler
    - repro by making json encode fail

OK - JS gradual slowdown over time?
    - try animation frame?

DONE - respect line and fill colours in drawing

DONE - have creech observe
    DONE - get view region
    DONE - draw region as a filled colour region
    DONE - NOP on Screen

DONE - make 'Entity' an interface
    DONE - BaseEntity implements, Creech and Food embed
        - No! Food Calculates size
    DONE - Pos, Size

DONE - Observe returns []Entity
    - can type-switch return list

DONE - foodDensity (size per value) is a property of the kind of food
    - arg to food ctor

Sat 13 Mar 08:33:21 GMT 2021
----------------------------

DONE - test region
    - test smallest granularity first
    - test bottom up

DONE - add ids to entities
    - factory to make with state?
    DONE - check in "plan" that we don't react to ourselves (same id)

DONE - add tests for turnHelper
    - write it as a pure function (no method call)
        - pos, target, maxTurn
    - test we turn towards target (don't over-turn)
    - test we turn away from threat
    - do we want a single turnHelper with towards/away flag?

DONE - sort observe list, nearest first
    - act on first
    DONE - when turning towards, don't turn full amount unless needed

DONE - make 'plan' an abstraction (name, func) so it can be displayed?

DONE - move constants into method call on Creech
    - view distance
    - size
    - turn speed max
    - run speed max

DONE - MakePlan depends on observation
    - do we want to reify plan?
        - type Plan interface {
            StillPossible() bool
            Execute()
        }

DONE - use view region
    - gets a list of []Food, []Creech (and distance to each)
        DONE - define "Region"
            - (poly or assembly of triangles)
            - want to be able to see to your immediate left and right
        - then find entities in that region
            - could use this also for randomEmptyPos?
        DONE - should be float-friendly
    DONE - what it sees depends which way it is facing
    - also on the creech abilities
        - genes, running

