Now
---

DONE - remove x,y from DrawAt
    - instead just pass the drawable
    - the drawables know where they are

- unpick the websocket loop into a function
    - and use defer for close

-----------------------------------------------------------------

Soon
----

- static cleanup
    - HTML structure
    - JS into sep file
    - ??? pass constants into a config block in JS?

- DRY foodSize
    - make size dependent on value?

- make food size related to value
    - only store one
    - lose 'size' in entity?
    - lose entity?

- have creech observe
    - gets a list of []Food, []Creech
        - define "Region"
            - (poly or assembly of triangles)
            - want to be able to see to your immediate left and right
        - that is the view area
        - then find entities in that region
            - could use this also for randomEmptyPos?
        - should be float-friendly
    - what it sees depends which way it is facing
    - also on the creech abilities
        - genes, running

- MakePlan depends on observation
    - do we want to reify plan?
        - type Plan interface {
            StillPossible() bool
            Execute()
        }

-----------------------------------------------------------------

Maybe
-----

- entity needs an id?
    - so we can find + remove them?

- move to PNGs?
    - or Drawable could send JS to draw on the canvas?
    - urls to load PNGs for creeches - actually entities
        - /entity/id/image.png
        - /creech   {

- pull a real random seed?

- send game state, not draw commands
    - but this does require "how to draw state" logic client side
        - golang wasm?

- don't return actual creeches and food in "Observe" but instead "observations"
    - disguise!
    - bad eyesight!

- how to handle running away from something
    - do we remember it's there?
    - can we hear it?

-----------------------------------------------------------------

Done
----

Sun 28 Feb 07:32:14 GMT 2021
----------------------------
DONE - clean golangci-lint

DONE - make tick a cmdline option

DONE - move to floats
    - pos
    - randomEmpty becomes "size" based
    - add Entity which has a float-pos and a size
        - food and creeches embed entity

DONE - turn and move on smaller granularity

DONE - fix down-pointing arrow

DONE - rename Dir Polar?

NO - remove 'R' from 'Dir'

DONE - web renderer
    DONE - draw a line (centre -> direction)
    DONE - open a websocket
    DONE - remove pixelsPerWidth
        - go 1:1 for now
        - then set up JS canvas with a transform
            - so that (0,0) is centered
            - and x goes from (-width/2, width]
            - and y goes from (-height/2, height]
            - then Drawable can send JS commands
                - startFrame fillrect (in game coords)
                - "circle"
                - moveTo/lineTo
                - fiinshFrame 'stroke'
    DONE - just send a poly to draw:
        - pts + hex rgb to fill
    DONE - proxy startframe/finishframe/drawat over websocket as JSON
        - or as JS!?
    DONE - drawat should send {pos, style=circle|line, facing} for creech and food
    DONE - see if it works
    - move to PNGs?
        - or Drawable could send JS to draw on the canvas?
    - urls to load PNGs for creeches - actually entities
        - /entity/id/image.png
        - /creech   {

DONE - TODO
    - is there a Drawable abstraction which would work over SDL and JS?
        - instead of returning JS to draw a thing?
        - work in internal coords
        type DrawCommand

DONE - renorm creech posses into modulo-space each tick

----

DONE - can we write a websocket-based renderer?
    - with a JS client?
    NO - in this case it make sense to make the render loop only send "undraw X", "draw X"?
        - or maybe like WM_PAINT (blank this region, draw these items in that region)
        - maybe not if we aren't tiled?

DONE - pull an 'Entity' out of Creech+Food?
    - has a pos
    - in a single list (or a single ForEach allows traversal?)

DONE - change to float coords for world?
    - change to float pos
        - change 'Equal' to 'Near'
        - inbuilt epilson?
        - or pass in size of Entities to define 'Near'?
        - dir becomes "theta"
    - tile at draw time?
        - only 'screen' should care, other renderers may not be tile based
    - pigeonhole problem? How to avoid drawing things in same tile?
        - Answer: Ensure we can't have things too close to each other

DONE - add in food
    - value, pos

DONE - add in another creech

NO - split polar out from Pos
    NO - tests? :-)

